{
  "name": "modulus",
  "description": "The command line interface for deploying applications to the Modulus hosting platform.",
  "keywords": [
    "cli",
    "modulus",
    "hosting",
    "cloud hosting",
    "paas",
    "platform-as-a-service",
    "deployment",
    "deploy",
    "command line",
    "modulusio"
  ],
  "version": "5.0.1",
  "author": {
    "name": "Modulus",
    "email": "feedback@modulus.io"
  },
  "maintainers": [
    {
      "name": "zwigby",
      "email": "ckey@paranoidferret.com"
    },
    {
      "name": "busyrich",
      "email": "richard@modulus.io"
    },
    {
      "name": "inconceivableduck",
      "email": "brandon@modulus.io"
    },
    {
      "name": "fiveisprime",
      "email": "matt@modulus.io"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/onmodulus/modulus-cli.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/onmodulus/modulus-cli/blob/master/LICENSE-MIT"
    }
  ],
  "dependencies": {
    "async": "0.1.x",
    "colors": "0.6.x",
    "commander-plus": "0.0.x",
    "demeteorizer": "3.x.x",
    "find-file-sync": "0.0.2",
    "fs-tools": "~0.2.10",
    "fstream-ignore": "0.0.x",
    "node-uuid": "1.3.3",
    "progress": "0.1.x",
    "prompt": "0.2.x",
    "request": "2.27.x",
    "split": "0.3.0",
    "text-table": "0.2.0",
    "through": "2.3.4",
    "underscore": "1.4.x",
    "update-notifier": "~0.1.7",
    "zip-stream": "0.5.1"
  },
  "devDependencies": {
    "mocha": "1.5.x",
    "express": "3.0.x"
  },
  "main": "./lib/modulus",
  "bin": {
    "modulus": "./bin/modulus"
  },
  "preferGlobal": true,
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {},
  "readme": "#MODULUS CLI\n\n[![NPM version](https://badge.fury.io/js/modulus.svg)](http://badge.fury.io/js/modulus)\n\nThis is the official command line tool for [Modulus.io](https://modulus.io/).\nUse it to create and manage your Modulus.io projects. For more detailed\ndescriptions of commands available, check out [the Modulus\ncodex](https://modulus.io/codex/cli/reference).\n\n##Installing\n\nTo install the Modulus CLI, simply npm install it globally.\n\n    $ npm install -g modulus\n\n##Usage\n\nUsing the CLI is easy.\n\n    Usage: modulus <command> <param1> <param2>\n\nAt any point you can run the *help* command to get a full list of commands and\nhow to use them.\n\nYou can also send feedback directly to Modulus using the *contact* command. Make\nsure your message is enclosed in double quotes (eg. “Your message”).\n\n    $ modulus contact \"This is feedback from the CLI!\"\n\n##Account Related Commands\n\nTo start, you may need an account. Using the *signup* command, you can quickly\ncreate an account to get things rolling. It will prompt you for a few required\npieces of information then set up an account.\n\n    $ modulus signup\n\nOnce you have an account, you need to log in. Running the *login* command will\nprompt you for your Modulus credentials or if you have linked your GitHub\naccount in the web portal (under account settings) you can use the *--github*\nflag to login using your GitHub credentials. This keeps a session open so you\ncan run commands under your account and the session will not be closed unless\nyou run the *logout* command or log in with a different account.\n\n    $ modulus login\n\nYou can also reset your password.\n\n    $ modulus resetPassword\n\nAnd to logout:\n\n    $ modulus logout\n\n##API Tokens\n\nIt is possible to invoke commands that require authentication without logging\ninto a user account by using API tokens. This is especially useful when\nautomating actions such as deploys or sharing a Modulus project with multiple\ndevelopers without sharing a user name and password.\n\n    $ modulus token create\n\nAPI Tokens use the `MODULUS_TOKEN` environment variable and can be used with any\ncommand that requires authentication.\n\n    $ MODULUS_TOKEN=API-TOKEN modulus deploy\n\nManage the API tokens that you have created using the list and remove commands.\n\n    $ modulus token list\n    $ modulus token remove API-TOKEN\n\n##Project Management\n\nOnce logged in, you are ready to create a project. This is done with the\n*project create* command, and all that is required is a name.\n\n    $ modulus project create\n\nYou can optionally pass in the name with *project create*.\n\n    $ modulus project create \"Lizard Locator\"\n\nYou can also delete a project with *project delete*. Add the *-p* option to pass\nin a project name.\n\n    $ modulus project delete\n\nTo deploy an application to your new project, you can use either the *project\ndeploy* command or its shorter sidekick, *deploy*. This command will take all\nthe contents of your current directory, zip them up and deploy them. Once the\ndeploy has started, the progress will be displayed. When the deploy completes,\nyou have a running application on Modulus. You can redeploy a new version of the\nproject at any time using the same process.\n\n    $ cd my/project/directory modulus deploy\n\nThe project's logs will be streamed in real-time during a deploy. You should see\nsome information about Modulus' activity, as well as the npm install process.\n\nYou can also pass in a directory as a command argument, if you do not want to\ndeploy the current directory.\n\n    $ modulus deploy my/project/directory\n\nIf you know which project you want to deploy to, you can use the *-p* option and\nprovide the name of the project you would like to deploy to.\n\n    $ modulus deploy -p \"Lizard Locator\" my/project/directory\n\nTo start, stop, or restart a project, use:\n\n    $ modulus project start\n\n    $ modulus project stop\n\n    $ modulus project restart\n\nThe *-p* option is available with these commands as well.\n\nTo scale a project to use multiple servos in a single infrastructure/region, you\ncan use *project scale <number>*.\n\n    $ modulus project scale 2\n\nFor multiple infrastructure providers and regions, you need more details.\n\n    $ modulus project scale aws.us-east-1a=1 joyent.us-east-1=1\n\nNote that existing scale options are overwritten with this command. For example,\nif a project is scaled to Digital Ocean, this will remove the Digital Ocean\nservos and you'll end up with 1 in AWS and 1 in Joyent.\n\n##Servo Commands\n\nYou can now also view all of your servos with *servo list*.\n\n    $ modulus servo list\n\nAnd you can restart a single servo with *servo restart*.\n\n    $ modulus servo restart\n\n The *-i* option allows you to specify a servo id.\n\n    $ modulus servo restart -i SERVO-ID\n\n##Environment Variables\n\nThe CLI also provides an easy way to manage a project’s environment variables.\nYou can start with listing your current variables with the *env list* command.\n\n    $ modulus env list\n\nTo add a new variable, use the *env set* command. It takes two parameters, name\nand value. This command can also be used to change the value of an existing\nvariable.\n\n    $ modulus env set DB_AUTH 12345\n\nIf you have no need for a variable anymore, you can provide the *env delete*\ncommand with a name and it will be removed from the project.\n\n    $ modulus env delete DB_AUTH\n\nAt any time, if you want to view the value of a single variable, use the *env\nget* command. It takes a name parameter and will display the value of the\nvariable of the name you specify.\n\n##MongoDB Database Management\n\nOnce logged in, you can create a MongoDB database. This is done with the *mongo\ncreate* command, and all that is required is a name.\n\n    $ modulus mongo create\n\nYou can optionally pass in the name with *mongo create*.\n\n    $ modulus mongo create \"Lizard Locator DB\"\n\nOnce a database has been created a user should be added to it. Use the *mongo\nuser create* command to create a database user.\n\n    $ modulus mongo user create\n\n##Add-Ons Management\n\nAfter logging in, you can set up add-ons for your project. To add an add-on to a\nproject, use *addons add*:\n\n    $ modulus addons add keen:developer\n\nRemove add-ons using *addons remove*:\n\n    $ modulus addons list\n    $ modulus addons remove keen\n\n##Logs\n\nIn times when you need to check up on your projects, you can view the project's\nlogs. This is done with the *project logs* command, which supports the *-p*\noption.\n\n    $ modulus project logs -p \"Lizard Locator\"\n\nWhile these logs are not streamed directly to the CLI, the logs themselves are\nupdated in real-time, so anytime you retrieve them they are current. To stream\nyour project's logs, you can use *logs tail*.\n\n    $ modulus project logs tail\n\n##Status\n\nThe *status* command allows you to view the status of Modulus as set on\nstatus.modulus.io.\n\n    $ modulus status\n\n##License\n\nCopyright (c) Modulus\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/onmodulus/modulus-cli/issues"
  },
  "_id": "modulus@5.0.1",
  "_from": "modulus@5.0.1",
  "dist": {
    "shasum": "c7c107e871c1cf019815927ea068ac2fded78145"
  },
  "_resolved": "https://registry.npmjs.org/modulus/-/modulus-5.0.1.tgz"
}
